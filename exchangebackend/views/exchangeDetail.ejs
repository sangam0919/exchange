<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://unpkg.com/lightweight-charts@4.1.1/dist/lightweight-charts.standalone.production.js"></script>
  <title>Mock Exchange</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: Arial, sans-serif; background-color: #f5f7fa; }

    #exchange-wrap {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 30px;
      padding: 40px 20px;
      width: 100%;
    }

    .chart {
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      padding: 20px;
      width: 800px;
      height: 500px;
      position: relative;
    }

    .chart-impomation {
      position: absolute;
      top: 20px;
      left: 30px;
      font-weight: bold;
      font-size: 18px;
      color: #333;
      z-index: 10;
    }

    .tooltip {
      position: absolute;
      top: 20px;
      right: 30px;
      background: rgba(0,0,0,0.75);
      color: white;
      padding: 6px 12px;
      border-radius: 5px;
      font-size: 14px;
      z-index: 10;
      pointer-events: none;
    }

    .order {
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      width: 400px;
      padding: 25px;
      display: flex;
      flex-direction: column;
    }

    .order-tabs {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
      border-bottom: 2px solid #eee;
    }

    .order-tabs .tab {
      flex: 1;
      padding: 12px 0;
      text-align: center;
      font-weight: bold;
      cursor: pointer;
      background: transparent;
      border: none;
      border-bottom: 3px solid transparent;
      transition: all 0.3s ease;
    }

    .order-tabs .tab.active {
      color: #0984e3;
      border-bottom: 3px solid #0984e3;
    }

    .tab-content {
      display: none;
      flex-direction: column;
      gap: 15px;
    }

    .tab-content.active {
      display: flex;
    }

    .order label {
      font-size: 14px;
      color: #444;
    }

    .order input {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-size: 14px;
    }

    .order input:focus {
      border-color: #0984e3;
      outline: none;
    }

    .order button {
      margin-top: 20px;
      padding: 12px;
      font-size: 16px;
      font-weight: bold;
      background-color: #0984e3;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .order button:hover {
      background-color: #086dc3;
    }
  </style>
</head>
<body>
  <%- include("common/header") %>

  <div id="exchange-wrap">
    <div class="chart" id="chart">
      <div class="chart-impomation">이름: <%= market %></div>
      <div class="tooltip" id="tooltip">가격: -</div>
    </div>

    <div class="order">
      <div class="order-tabs">
        <button class="tab active" data-tab="buy">매수</button>
        <button class="tab" data-tab="sell">매도</button>
        <button class="tab" data-tab="history">거래내역</button>
      </div>

      <div class="tab-content active" id="buy">
        <label>매수가격 (KRW)</label>
        <input type="text" id="buy-price">
        <label>주문수량</label>
        <input type="text" id="buy-amount">
        <label>주문총액</label>
        <input type="text" id="buy-total" readonly>
        <button onclick="submitOrder('buy')">매수하기</button>
      </div>

      <div class="tab-content" id="sell">
        <label>매도가격 (KRW)</label>
        <input type="text" id="sell-price">
        <label>판매수량</label>
        <input type="text" id="sell-amount">
        <label>판매총액</label>
        <input type="text" id="sell-total" readonly>
        <button onclick="submitOrder('sell')">매도하기</button>
      </div>

      <div class="tab-content" id="history">
        <p>최근 거래내역이 여기에 표시됩니다.</p>
      </div>
    </div>
  </div>

  <script>
    const MARKET = '<%= market %>';
    const chartContainer = document.getElementById('chart');
    const tooltip = document.getElementById('tooltip');

    const chart = LightweightCharts.createChart(chartContainer, {
      layout: {
        background: {
          type: 'gradient',
          topColor: '#ffffff',
          bottomColor: '#e3f2fd'
        },
        textColor: '#111',
        fontSize: 12,
        fontFamily: 'Arial'
      },
      grid: {
        vertLines: { color: '#eee' },
        horzLines: { color: '#eee' }
      },
      priceScale: { borderColor: '#bbb' },
      timeScale: {
        borderColor: '#bbb',
        timeVisible: true
      },
    });

    chart.resize(800, 500);

    const candleSeries = chart.addCandlestickSeries();
    let currentPriceLine = null;

    async function loadCandleData() {
      try {
        const res = await fetch(`https://api.upbit.com/v1/candles/minutes/1?market=${MARKET}&count=60`);
        const data = await res.json();
        const mapped = data.reverse().map(item => ({
          time: Math.floor(new Date(item.candle_date_time_kst) / 1000),
          open: item.opening_price,
          high: item.high_price,
          low: item.low_price,
          close: item.trade_price
        }));
        candleSeries.setData(mapped);
      } catch (err) {
        console.error("캔들 로딩 실패", err);
      }
    }

    async function updateLatestPrice() {
      try {
        const res = await fetch(`https://api.upbit.com/v1/ticker?markets=${MARKET}`);
        const data = await res.json();
        const last = data[0];

        candleSeries.update({
          time: currentMinute,
          open: last.opening_price,
          high: last.high_price,
          low: last.low_price,
          close: last.trade_price
        });
        
        chart.removePriceLine?.(currentPriceLine);
        currentPriceLine = chart.addPriceLine({
          price: last.trade_price,
          color: 'red',
          lineWidth: 1,
          lineStyle: 2,
          axisLabelVisible: true,
          title: '실시간가'
        });
      } catch (err) {
        console.error("가격 업데이트 실패", err);
      }
    }

    chart.subscribeCrosshairMove(param => {
      if (param.point && param.seriesData) {
        const price = param.seriesData.get(candleSeries)?.close;
        tooltip.textContent = price ? `가격: ${price.toLocaleString()} KRW` : '가격: -';
      }
    });

    loadCandleData();
    setInterval(updateLatestPrice, 5000);

    document.querySelectorAll('.tab').forEach(tab => {
      tab.addEventListener('click', () => {
        const target = tab.dataset.tab;
        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
        tab.classList.add('active');
        document.getElementById(target).classList.add('active');
      });
    });

    function submitOrder(type) {
      const price = document.getElementById(`${type}-price`).value;
      const amount = document.getElementById(`${type}-amount`).value;
      const total = price * amount;

      fetch('/api/order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ type, market: MARKET, price, amount, total })
      })
      .then(res => res.json())
      .then(data => {
        alert(`${type === 'buy' ? '매수' : '매도'} 완료: ${data.message}`);
      })
      .catch(err => {
        console.error("주문 실패", err);
        alert("주문 처리 실패");
      });
    }

    ['buy', 'sell'].forEach(type => {
      ['price', 'amount'].forEach(field => {
        document.getElementById(`${type}-${field}`).addEventListener('input', () => {
          const price = parseFloat(document.getElementById(`${type}-price`).value || 0);
          const amount = parseFloat(document.getElementById(`${type}-amount`).value || 0);
          document.getElementById(`${type}-total`).value = (price * amount).toLocaleString();
        });
      });
    });
  </script>

  <%- include("common/footer") %>
</body>
</html>
